#!/usr/bin/perl -w
# $Id: Makefile.PL 2693 2008-01-02 09:54:19Z hospelt $
use 5.006001;
use strict;
use warnings;
use ExtUtils::MakeMaker;
use FindBin;
use Config qw(%Config);

our $VERSION = "1.000";

# Allows to suppress all program installation with -n (library only)
use Getopt::Std;
our ($opt_n, $opt_y);
getopts("ny") || die "Usage: $0 [-n] [-y]\n";

my @programs_to_install;

if (!$opt_n || $opt_y) {
    print <<EOT	## no critic (UselessNoCritic InputOutput::RequireCheckedSyscalls)

This package comes with programs that I can try
to install in $Config{installscript}.

   Note that you can avoid this question by passing
   the '-n' or '-y' option to 'Makefile.PL'.

EOT
if !$opt_y;
    push @programs_to_install, "bin/git-exportd" if
        $opt_y ||
        prompt("Install git-exportd, a git temporary export manager ?", "y") =~ /^y/i;
}

my $option_file = "$FindBin::Bin/t/options.$^O";
my $new = "$option_file.new.$$";
open(my $fh, ">", $new) || die "Could not open '$new': $!";
printf($fh "KEEP=0\nSTRACE=0\n") ||
    die "Error writing to '$new': $!";
eval {
    close($fh) || die "Could not close '$new': $!";
    rename($new, $option_file) ||
        die "Could not rename '$new' to '$option_file': $!";
};
if ($@) {
    $fh = undef;	# close file if open
    unlink($new) || die "Could not unlink '$new': $! after $@";
    die $@;
}

settings();

WriteMakefile
    (NAME		=> 'Git::ExportDaemon',
     VERSION_FROM	=> 'lib/Git/ExportDaemon/Package.pm',
     eval {
	 ## no critic (UselessNoCritic MagicNumbers)
	 ExtUtils::MakeMaker->VERSION(6.55_01);
	 1;
     } ? (BUILD_REQUIRES	=> {
	 # Only for the tests
	 "Test::More"	=> "0.01",
     }) : (),
     PREREQ_PM		=> {
     },
     ABSTRACT		=> 'Manage temporary git expansions',
     AUTHOR		=> 'Ton Hospel <Git::ExportDaemon@ton.iguana.be>',
     $^O eq "MSWin32" ? (
	 PM_FILTER	=> '$(PERL) -p -e1',
     ) : (),
     LICENSE		=> 'perl',
);

# START MY
# autogenerated by release_pm
BEGIN {
    package MY;

    use vars qw(%postamble);

    $postamble{ppm} = <<'EOT';
ppm: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm3} = <<'EOT';
ppm3: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=3 --leave=ppm3 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm4} = <<'EOT';
ppm4: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=4 --leave=ppm4 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppd} = <<'EOT';
$(DISTNAME).ppd: all ppd
EOT

    $postamble{cover} = <<'EOT';
cover:
	cover -delete
	mkdir cover_db
	-HARNESS_PERL_SWITCHES=-MDevel::Cover make test
	cover
EOT

    $postamble{critic} = <<'EOT';
critic:
	perlcritic .
EOT

    $postamble{ppm_install} = <<'EOT';
ppm_install: ppm
	ppm install ppm/$(DISTNAME).ppd
EOT

    $postamble{ppm_uninstall} = <<'EOT';
ppm_uninstall:
	ppm uninstall $(DISTNAME)
EOT

undef &postamble;	## no critic (UselessNoCritic AmpersandSigils)
}
{
    package MY;
    sub postamble {
	return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
    }
}
# END MY

sub settings {
    package MY;
    our %postamble;

    $postamble{version_check} = <<'EOF';
all ::
	$(NOECHO) $(FULLPERL) version_check "$(NAME)" "$(DESTINSTALLSITELIB)" "$(VERSION)" "$(VERSION_FROM)"
EOF
}
# END MY

sub settings {
    package MY;
    our %postamble;

    $postamble{version_check} = <<'EOF';
all ::
	$(NOECHO) $(FULLPERL) version_check "$(NAME)" "$(DESTINSTALLSITELIB)" "$(VERSION)" "$(VERSION_FROM)"
EOF
}
